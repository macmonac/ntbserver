#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright GREYC - UMR 6072 ; Université de Caen Normandie
# Esplanade de la paix
# CS 14032
# 14032 Caen CEDEX 5
# contributeur : Pierre BLONDEAU, Davy GIGAN, Cyprien GOTTSTEIN (2014)
#
# Pierre BLONDEAU - pierre.blondeau@unicaen.fr
# Davy GIGAN - davy.gigan@unicaen.fr
# Cyprien GOTTSTEIN - gottstein.cyprien@gmail.com
#
# Ce logiciel est un programme informatique servant à déchiffrer un linux
# par le réseau et sans intervention de l'utilisateur.
#
# Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
# respectant les principes de diffusion des logiciels libres. Vous pouvez
# utiliser, modifier et/ou redistribuer ce programme sous les conditions
# de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA
# sur le site "http://www.cecill.info".
#
# En contrepartie de l'accessibilité au code source et des droits de copie,
# de modification et de redistribution accordés par cette licence, il n'est
# offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
# seule une responsabilité restreinte pèse sur l'auteur du programme,  le
# titulaire des droits patrimoniaux et les concédants successifs.
#
# A cet égard  l'attention de l'utilisateur est attirée sur les risques
# associés au chargement,  à l'utilisation,  à la modification et/ou au
# développement et à la reproduction du logiciel par l'utilisateur étant
# donné sa spécificité de logiciel libre, qui peut le rendre complexe à
# manipuler et qui le réserve donc à des développeurs et des professionnels
# avertis possédant  des  connaissances  informatiques approfondies.  Les
# utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
# logiciel à leurs besoins dans des conditions permettant d'assurer la
# sécurité de leurs systèmes et ou de leurs données et, plus généralement,
# à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
#
# Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
# pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
# termes.
#
# ================================ English ================================
#
# Copyright GREYC - UMR 6072 ; Université de Caen Normandie
# Esplanade de la paix
# CS 14032
# 14032 Caen CEDEX 5
# contributor(s) : Pierre BLONDEAU, Davy GIGAN, Cyprien GOTTSTEIN (2014)
#
# Pierre BLONDEAU - pierre.blondeau@unicaen.fr
# Davy GIGAN - davy.gigan@unicaen.fr
# Cyprien GOTTSTEIN - gottstein.cyprien@gmail.com
#
# This software is a computer program whose purpose is to decrypt a linux
# by the network without user intervention.
#
# This software is governed by the CeCILL-B license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-B
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

# vim:set ai et sta ts=4 sts=4 sw=4 tw=160:
# Last modified: mardi 2015-08-11 16:43:20 +0200

import os
import sys
import json
import csv
from argparse import ArgumentParser, FileType
import django
from Crypto.PublicKey import RSA
from copy import deepcopy
import socket
import datetime

# Pour récupérer les objects django
sys.path.append("/usr/share/ntbserver")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ntbserver.settings")
django.setup()
from ntbserver_api.models import Machine, Logs
from ntbserver_api.utils import convert_uuid

verbose = False
force = False


def all_machines():
    return Machine.objects.all()


def ids_machines(ids, error=True):
    machines = Machine.objects.filter(machine_id__in=ids)
    ids_ = ids[:]
    for m in machines:
        ids_.remove(m.machine_id)
    if error:
        for i in ids_:
            print("Can't find id %s" % (i))
    return machines


def search_machines(search):
    res = []
    machines_sid = Machine.objects.filter(machine_id__icontains=search)
    for m in machines_sid:
        res.append(m)
    logs_sip = Logs.objects.filter(ip__icontains=search).select_related()
    for l in logs_sip:
        if isinstance(l.machine, Machine):
            res.append(l.machine)
    try:
        ips = []
        for family, socktype, proto, canonname, sockaddr in socket.getaddrinfo(search, None):
            ips.append(sockaddr[0])
        ips = list(set(ips))
        for ip in ips:
            logs_sip = Logs.objects.filter(ip=ip).select_related()
            for l in logs_sip:
                if isinstance(l.machine, Machine):
                    res.append(l.machine)
    except:
        pass
    return list(set(res))


def last_log_passphrase_ok_info(machine):
    last_log = Logs.objects.filter(machine=machine, result=True, action='passphrase').order_by('-date').first()
    if last_log:
        try:
            host = "%s ( %s )" % (socket.gethostbyaddr(last_log.ip)[0], last_log.ip)
        except:
            host = last_log.ip
        return host, last_log.date
    else:
        return None, None


def list_machines(machines, fields=['machine_id', 'last_passphrase_machine', 'last_passphrase_date'], all_fields=False, format='csv', output=None, skip_column_names=False):
    res = []
    machine_fields = dict(Machine._fields.items()).keys()
    machine_fields.extend(['last_passphrase_machine', 'last_passphrase_date'])
    res_fields = machine_fields if all_fields else fields

    for m in machines:
        if all(k in machine_fields for k in res_fields):
            if 'last_passphrase_machine' in res_fields or 'last_passphrase_date' in res_fields:
                last_log_host, last_log_date = last_log_passphrase_ok_info(m)
            extract = {}
            for f in res_fields:
                if f == 'last_passphrase_machine':
                    extract['last_passphrase_machine'] = last_log_host if last_log_host else 'None'
                elif f == 'last_passphrase_date':
                    extract['last_passphrase_date'] = last_log_date if last_log_date else 'None'
                else:
                    extract[f] = m[f]
            res.append(extract)
        else:
            print("Fields error. Avaliable : %s" % (",".join(machine_fields)))
    print_res(res, format, output, skip_column_names)


def print_res(res, format='csv', output=None, skip_column_names=False):
    if res and isinstance(res, list) and len(res) > 0:
        if format == 'csv':
            w = csv.DictWriter(output, res[0].keys(), delimiter=',')
            if not skip_column_names:
                w.writeheader()
            for r in res:
                w.writerow(r)
        elif format == 'json':
            json.dump(res, output)


def disable_machines(machines):
    for m in machines:
        last_log_host, last_log_date = last_log_passphrase_ok_info(m)
        if yes_no("Are you sure you want to disable machine : %s ( LP : %s )" % (m.machine_id, last_log_host)):
            m.disable()


def enable_machines(machines):
    for m in machines:
        last_log_host, last_log_date = last_log_passphrase_ok_info(m)
        if yes_no("Are you sure you want to enable machine : %s ( LP : %s )" % (m.machine_id, last_log_host)):
            m.enable()


def delete_machines(machines):
    for m in machines:
        last_log_host, last_log_date = last_log_passphrase_ok_info(m)
        if yes_no("Are you sure you want to delete machine : %s ( LP : %s )" % (m.machine_id, last_log_host)):
            m.delete()
            Logs.objects.filter(machine=m).delete()


def clone_machine(machine, new_id):
    m = deepcopy(machine)
    m.id = None
    m.machine_id = new_id
    m.save()


def convert_machines(ids):
    machines = []
    for i in ids:
        c = convert_uuid(i)
        m = ids_machines([i, c], False)
        if len(m) < 1:
            print("Can't find id %s or %s" % (i, c))
        elif len(m) > 1:
            print("Too many result for id %s or %s" % (i, c))
        else:
            machines.append(m[0])
    for m in machines:
        last_log_host, last_log_date = last_log_passphrase_ok_info(m)
        new_machine_id = convert_uuid(m.machine_id)
        if yes_no("Are you sure you want to convert %s -> %s ( LP : %s )" % (m.machine_id, new_machine_id, last_log_host)):
            m.machine_id = new_machine_id
            m.save()


def create_machine(id, public_key, passphrase=None):
    m = Machine(machine_id=id, public_key=public_key, passphrase=passphrase)
    if not passphrase:
        m.generate_passphrase()
    m.save()


def clean_logs():
    if yes_no("Are you sure you want clean dereference logs"):
        count_clean = 0
        logs = Logs.objects.all()
        count_all = logs.count()
        for l in logs:
            if not isinstance(l.machine, Machine):
                l.delete()
                count_clean = count_clean + 1
        print("Clean %i/%i logs" % (count_clean, count_all))


def clean_old_logs():
    if yes_no("Are you sure you want clean logs older than one year"):
        count_all = Logs.objects.count()
        date_old = datetime.datetime.now() - datetime.timedelta(days=365)
        logs_to_clean = Logs.objects.filter(date__gt=date_old)
        count_clean = logs_to_clean.count()
        for l in logs_to_clean:
            l.delete()
        print("Clean %i/%i logs" % (count_clean, count_all))


def yes_no(question, default=False):
    global force
    if force:
        return True

    valid = {"yes": True, "y": True,
             "no": False, "n": False}
    if default:
        prompt = " [Y/n] "
    elif not default:
        prompt = " [y/N] "
    else:
        prompt = " [y/n] "

    while True:
        sys.stdout.write(question + prompt)
        choice = raw_input().lower()
        if default is not None and choice == '':
            return default
        elif choice in valid:
            return valid[choice]
        else:
            sys.stdout.write("Please respond with 'yes' or 'no' "
                             "(or 'y' or 'n').\n")


def main():
    global verbose, force
    parser = ArgumentParser(description="NTBServer CLI", add_help=True)
    parser.add_argument('-a', '--all', action="store_true", help='All IDs')
    parser.add_argument('-i', '--id', action="append", nargs='+', help='Machines IDs', default=[[]])
    action = parser.add_mutually_exclusive_group(required=True)
    action.add_argument('-l', '--list', action='store_true', help='List machines')
    parser.add_argument('--fields', action='append', nargs='+', help='Field\'s filters. Use --all-fields to find wath you want ( ex : machine_id, passphrase, last_passphrase_machine, last_passphrase_date )')
    parser.add_argument('--all-fields', action='store_true', help='All available fields')
    parser.add_argument('--format', action='store', help='Output format ( default : csv )', choices=['csv', 'json'], default='csv')
    parser.add_argument('--output', action='store', help='Output file ( default : stdout )', type=FileType('wb', 0), default='-')
    parser.add_argument('-N', '--skip-column-names', action='store_true', help='Do not write column names in results.')
    action.add_argument('-d', '--disable', action='store_true', help='Disable machines')
    action.add_argument('-e', '--enable', action='store_true', help='Enable machines')
    action.add_argument('-cu', '--convert-uuid', action='store_true', help='Convert machines UUID from OLD or NEW')
    action.add_argument('-c', '--create', action='store_true', help='Create a new machine ( whit only one --id )')
    parser.add_argument('--public-key', action="store", help='Machine public key', type=FileType('r'))
    # parser.add_argument('--passphrase', action="store",help='Machine passphrase', default=None)
    action.add_argument('--delete', action='store_true', help='Delete machines')
    action.add_argument('--clone', action='store', help='Clone one machine to new one')
    action.add_argument('-s', '--search', action='store', help='Search machines')
    action.add_argument('--clean-logs', action='store_true', help='Clean logs where machines have been deleted')
    action.add_argument('--clean-old-logs', action='store_true', help='Clean logs older than one year')
    parser.add_argument('-f', '--force', action='store_true', help='Force action')
    parser.add_argument('-v', '--verbose', action='store_true', help='Show more informations')

    args = parser.parse_args()

    verbose = args.verbose
    force = args.force

    # append + nargs='+' need union
    ids = []
    ids.extend(reduce(set.union, map(set, args.id)))
    fields = ['machine_id', 'last_passphrase_machine', 'last_passphrase_date']
    if args.fields:
        fields = []
        fields.extend(reduce(set.union, map(set, args.fields)))

    print_help = None

    machines = None
    if args.all:
        machines = all_machines()
    elif ids:
        error = False if args.convert_uuid or args.create else True
        machines = ids_machines(ids, error)
    elif args.search:
        machines = search_machines(args.search)
        args.list = True

    if machines and args.list:
        list_machines(machines, fields=fields, all_fields=args.all_fields, format=args.format, output=args.output, skip_column_names=args.skip_column_names)
    elif machines and args.disable:
        disable_machines(machines)
    elif machines and args.enable:
        enable_machines(machines)
    elif machines and args.delete:
        delete_machines(machines)
    elif machines and len(machines) == 1 and args.clone:
        clone_machine(machines[0], args.clone)
    elif args.convert_uuid:
        convert_machines(ids)
    elif args.create:
        if len(ids) != 1:
            print_help = "Only one ID for the creation"
        elif machines:
            print_help = "Machine ID already exist : %s" % (ids[0])
        elif not args.public_key:
            print_help = "You must specidy public_key"
        else:
            public_key = args.public_key.read()
            try:
                RSA.importKey(public_key)
            except Exception as e:
                print_help = "Bad public_key : %s" % (str(e))
            # passphrase=args.passphrase
            # try:
            #     b64decode(args.passphrase)
            # except Exception as e:
            #     passphrase=b64encode(args.passphrase)
            if not print_help:
                # create_machine(ids[0], public_key=public_key, passphrase=passphrase)
                create_machine(ids[0], public_key=public_key)
    elif args.clean_logs:
        clean_logs()
    elif args.clean_old_logs:
        clean_old_logs()
    else:
        print_help = "Nothing done"

    if print_help:
        sys.stderr.write("%s\n" % (print_help))
        sys.exit(1)

# Execution si je n'ai pas été chargé par un autre programme
if __name__ == "__main__":
    main()
