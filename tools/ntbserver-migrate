#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright GREYC - UMR 6072 ; Université de Caen Normandie
# Esplanade de la paix
# CS 14032
# 14032 Caen CEDEX 5
# contributeur : Pierre BLONDEAU, Davy GIGAN, Cyprien GOTTSTEIN (2014)
#
# Pierre BLONDEAU - pierre.blondeau@unicaen.fr
# Davy GIGAN - davy.gigan@unicaen.fr
# Cyprien GOTTSTEIN - gottstein.cyprien@gmail.com
#
# Ce logiciel est un programme informatique servant à déchiffrer un linux
# par le réseau et sans intervention de l'utilisateur.
#
# Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
# respectant les principes de diffusion des logiciels libres. Vous pouvez
# utiliser, modifier et/ou redistribuer ce programme sous les conditions
# de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA
# sur le site "http://www.cecill.info".
#
# En contrepartie de l'accessibilité au code source et des droits de copie,
# de modification et de redistribution accordés par cette licence, il n'est
# offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
# seule une responsabilité restreinte pèse sur l'auteur du programme,  le
# titulaire des droits patrimoniaux et les concédants successifs.
#
# A cet égard  l'attention de l'utilisateur est attirée sur les risques
# associés au chargement,  à l'utilisation,  à la modification et/ou au
# développement et à la reproduction du logiciel par l'utilisateur étant
# donné sa spécificité de logiciel libre, qui peut le rendre complexe à
# manipuler et qui le réserve donc à des développeurs et des professionnels
# avertis possédant  des  connaissances  informatiques approfondies.  Les
# utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
# logiciel à leurs besoins dans des conditions permettant d'assurer la
# sécurité de leurs systèmes et ou de leurs données et, plus généralement,
# à l'utiliser et l'exploiter dans les mêmes conditions de sécurité.
#
# Le fait que vous puissiez accéder à cet en-tête signifie que vous avez
# pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
# termes.
#
# ================================ English ================================
#
# Copyright GREYC - UMR 6072 ; Université de Caen Normandie
# Esplanade de la paix
# CS 14032
# 14032 Caen CEDEX 5
# contributor(s) : Pierre BLONDEAU, Davy GIGAN, Cyprien GOTTSTEIN (2014)
#
# Pierre BLONDEAU - pierre.blondeau@unicaen.fr
# Davy GIGAN - davy.gigan@unicaen.fr
# Cyprien GOTTSTEIN - gottstein.cyprien@gmail.com
#
# This software is a computer program whose purpose is to decrypt a linux
# by the network without user intervention.
#
# This software is governed by the CeCILL-B license under French law and
# abiding by the rules of distribution of free software.  You can  use,
# modify and/ or redistribute the software under the terms of the CeCILL-B
# license as circulated by CEA, CNRS and INRIA at the following URL
# "http://www.cecill.info".
#
# As a counterpart to the access to the source code and  rights to copy,
# modify and redistribute granted by the license, users are provided only
# with a limited warranty  and the software's author,  the holder of the
# economic rights,  and the successive licensors  have only  limited
# liability.
#
# In this respect, the user's attention is drawn to the risks associated
# with loading,  using,  modifying and/or developing or reproducing the
# software by the user in light of its specific status of free software,
# that may mean  that it is complicated to manipulate,  and  that  also
# therefore means  that it is reserved for developers  and  experienced
# professionals having in-depth computer knowledge. Users are therefore
# encouraged to load and test the software's suitability as regards their
# requirements in conditions enabling the security of their systems and/or
# data to be ensured and,  more generally, to use and operate it in the
# same conditions as regards security.
#
# The fact that you are presently reading this means that you have had
# knowledge of the CeCILL-B license and that you accept its terms.

# vim:set ai et sta ts=4 sts=4 sw=4 tw=160:
# Last modified: lundi 2015-08-10 17:45:53 +0200

import os, sys, uuid, datetime, re
from argparse import ArgumentParser
from pprint import pprint
import django
from pymongo import MongoClient
import ssl
import base64
import mongoengine

# Get Django facilities
sys.path.append("/usr/share/ntbserver")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ntbserver.settings")
django.setup()
from ntbserver_api.models import *

def get_db(args):
    if args.ssl:
        reqs=ssl.CERT_NONE if args.ssl_no_check_certificate else ssl.CERT_REQUIRED
        client = MongoClient(args.uri,
                ssl=True,
                ssl_cert_reqs=reqs,
                ssl_keyfile=args.ssl_keyfile,
                ssl_certfile=args.ssl_certfile,
                ssl_ca_certs=args.ssl_ca_certs)
    else:
        client = MongoClient(args.uri)
    return client[args.database]

def import_db(db, db_old):
    if len(db.collection_names(include_system_collections=False)) > 0 :
            print("New database must be empty when import !")
            sys.exit(1)
    for c in db_old.collection_names(include_system_collections=False) :
        # DEPRECATED in version 3 must use insert_many() instead.
        db[c].insert(db_old[c].find())

def try_migrate(db, version, drop = False):
    nextfunction="migrate_from_%s" %version.version
    if nextfunction in globals():
        globals()[nextfunction](db, version, drop)
        try_migrate(db, version, drop)

def copy_before_migrate(db, version):
    now = datetime.datetime.now()
    date = now.strftime("%Y%m%d%H%M%S")
    for c in db.collection_names(include_system_collections=False) :
        if re.match( r'^migrate_.*', c) or re.match( r'^version$', c):
            continue
        db[c].rename(get_collection_migrate_name(version, date, c))
    return date

def get_collection_migrate_name(version, date, oldname):
    return "migrate_%s_%s_%s" %(version.version, date, oldname)

def migrate_from_1(db, version, drop=False):
    date = copy_before_migrate(db, version)
    if db[get_collection_migrate_name(version, date, "machine")] in db.collection_names():
        for m in list(db[get_collection_migrate_name(version, date, "machine")].find()):
            newm = Machine(machine_id=m['id'], public_key=m['public_key'] , passphrase=base64.b64encode(m['passphrase']))
            newm.save()
    if drop :
        for c in db.collection_names(include_system_collections=False) :
            if re.match( r'^migrate_.*', c) :
                db[c].drop()
    else :
        print("Verify migrate data and remove old collection %s" %(get_collection_migrate_name(version, date, "*")))
    # Changer version after everything
    version.version=2
    version.save()

def migrate_from_2(db, version, drop=False):
    date = copy_before_migrate(db, version)
    if db[get_collection_migrate_name(version, date, "machine")] in db.collection_names():
        for m in list(db[get_collection_migrate_name(version, date, "machine")].find()):
            passphrase=m['passphrase'] if 'passphrase' in m.keys() else None
            disabled_date=m['revoked_date'] if 'revoked_date' in m.keys() else None
            newm = Machine( machine_id=m['machine_id'], public_key=m['public_key'] , passphrase=passphrase, disabled=m['revoked'], disabled_date=disabled_date )
            newm.save()
    if get_collection_migrate_name(version, date, "logs") in db.collection_names():
        db[get_collection_migrate_name(version, date, "logs")].rename("logs")
    if drop :
        for c in db.collection_names(include_system_collections=False) :
            if re.match( r'^migrate_.*', c) :
                db[c].drop()
    else :
        print("Verify migrate data and remove old collection %s" %(get_collection_migrate_name(version, date, "*")))
    # Changer version after everything
    version.version=3
    version.save()

def main():
    parser = ArgumentParser(description="NTBServer CLI")
    parser.add_argument('-u','--uri', action='store',help='Import from un other MongoDB connexion URI : http://docs.mongodb.org/manual/reference/connection-string/')
    parser.add_argument('-d','--database', action='store',help='OLD Database')
    parser.add_argument('-s','--ssl', action='store_true',help='Use SSL connexion', default=False)
    parser.add_argument('--ssl_no_check_certificate', action='store_true',help='No check SSL certificate', default=False)
    parser.add_argument('--ssl_keyfile', action='store',help='Client key')
    parser.add_argument('--ssl_certfile', action='store',help='Client certificate')
    parser.add_argument('--ssl_ca_certs', action='store',help='Authority certificate')
    parser.add_argument('--drop', action='store_true',help='Drop old collections', default=False)

    args = parser.parse_args()

    # db = mongoengine.connection.get_connection()
    db = mongoengine.connection.get_db()
    if args.uri :
        db_old = get_db(args)
        import_db(db, db_old)

    version=None
    if Version.objects.count() > 0 :
        version = Version.objects.all()[:1].get()
    if not version :
        version = Version(version=1)

    try_migrate(db, version, args.drop)

# Execution si je n'ai pas été chargé par un autre programme
if __name__ == "__main__":
    main()
